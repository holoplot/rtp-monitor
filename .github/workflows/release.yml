name: Release

on:
  push:
    tags:
      - "v*"

env:
  GO_VERSION: "1.24"

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: make deps

      - name: Run tests
        run: make test

      - name: Check code quality
        run: |
          make vet
          make fmt

      - name: Show version information
        run: make version

      - name: Build release
        run: make release

      - name: Test version information
        run: |
          # Test one of the binaries to ensure version is embedded correctly
          cd bin/release
          VERSION=$(git describe --tags --always --dirty)
          tar -xzf rtp-monitor-$VERSION-linux-amd64.tar.gz
          ./rtp-monitor-$VERSION-linux-amd64 version

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            bin/release/*.tar.gz
            bin/release/*.zip
            bin/release/checksums.txt
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          body: |
            ## RTP Stream Monitor ${{ github.ref_name }}

            A Go application for monitoring and tracking the availability of Real-time Transport Protocol (RTP) streams in your network.

            ### What's New
            - Version information is embedded in the binary using `git describe`
            - Use `rtp-monitor version` or `rtp-monitor --version` to see detailed version info
            - Build includes git commit hash and build timestamp

            ## Installation

            ### Linux (AMD64)
            ```bash
            wget https://github.com/holoplot/rtp-monitor/releases/download/${{ github.ref_name }}/rtp-monitor-${{ github.ref_name }}-linux-amd64.tar.gz
            tar -xzf rtp-monitor-${{ github.ref_name }}-linux-amd64.tar.gz
            sudo mv rtp-monitor-${{ github.ref_name }}-linux-amd64 /usr/local/bin/rtp-monitor
            ```

            ### Linux (ARM64)
            ```bash
            wget https://github.com/holoplot/rtp-monitor/releases/download/${{ github.ref_name }}/rtp-monitor-${{ github.ref_name }}-linux-arm64.tar.gz
            tar -xzf rtp-monitor-${{ github.ref_name }}-linux-arm64.tar.gz
            sudo mv rtp-monitor-${{ github.ref_name }}-linux-arm64 /usr/local/bin/rtp-monitor
            ```

            ### macOS (Intel)
            ```bash
            wget https://github.com/holoplot/rtp-monitor/releases/download/${{ github.ref_name }}/rtp-monitor-${{ github.ref_name }}-darwin-amd64.tar.gz
            tar -xzf rtp-monitor-${{ github.ref_name }}-darwin-amd64.tar.gz
            sudo mv rtp-monitor-${{ github.ref_name }}-darwin-amd64 /usr/local/bin/rtp-monitor
            ```

            ### macOS (Apple Silicon)
            ```bash
            wget https://github.com/holoplot/rtp-monitor/releases/download/${{ github.ref_name }}/rtp-monitor-${{ github.ref_name }}-darwin-arm64.tar.gz
            tar -xzf rtp-monitor-${{ github.ref_name }}-darwin-arm64.tar.gz
            sudo mv rtp-monitor-${{ github.ref_name }}-darwin-arm64 /usr/local/bin/rtp-monitor
            ```

            ### Windows
            Download the `rtp-monitor-${{ github.ref_name }}-windows-amd64.zip` file and extract it to a directory in your PATH.

            ### Verify checksums
            ```bash
            wget https://github.com/holoplot/rtp-monitor/releases/download/${{ github.ref_name }}/checksums.txt
            sha256sum -c checksums.txt
            ```

            ### Usage
            ```bash
            # Start the TUI
            rtp-monitor

            # Show version information
            rtp-monitor version

            # Show help
            rtp-monitor --help
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
